// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc706.SW2017;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon chassisleftDriveOne;
    public static CANTalon chassisleftDriveTwo;
    public static CANTalon chassisrightDriveOne;
    public static CANTalon chassisrightDriveTwo;
    public static CANTalon chassiswinchOne;
    public static CANTalon chassiswinchTwo;
    public static DoubleSolenoid chassisshiftSol;
    public static CANTalon shooterconveyorMotor;
    public static CANTalon shooteragitatorMotor;
    public static CANTalon shooterleftShooter;
    public static CANTalon shooterrightShooter;
    public static CANTalon intakeintakeMotor;
    public static DoubleSolenoid gearreleaseFlap;
    public static Solenoid gearreceiveFlap;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisleftDriveOne = new CANTalon(0);
        LiveWindow.addActuator("Chassis", "leftDriveOne", chassisleftDriveOne);
        
        chassisleftDriveTwo = new CANTalon(1);
        LiveWindow.addActuator("Chassis", "leftDriveTwo", chassisleftDriveTwo);
        
        chassisrightDriveOne = new CANTalon(2);
        LiveWindow.addActuator("Chassis", "rightDriveOne", chassisrightDriveOne);
        
        chassisrightDriveTwo = new CANTalon(3);
        LiveWindow.addActuator("Chassis", "rightDriveTwo", chassisrightDriveTwo);
        
        chassiswinchOne = new CANTalon(4);
        LiveWindow.addActuator("Chassis", "winchOne", chassiswinchOne);
        
        chassiswinchTwo = new CANTalon(5);
        LiveWindow.addActuator("Chassis", "winchTwo", chassiswinchTwo);
        
        chassisshiftSol = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Chassis", "shiftSol", chassisshiftSol);
        
        shooterconveyorMotor = new CANTalon(6);
        LiveWindow.addActuator("Shooter", "conveyorMotor", shooterconveyorMotor);
        
        shooteragitatorMotor = new CANTalon(7);
        LiveWindow.addActuator("Shooter", "agitatorMotor", shooteragitatorMotor);
        
        shooterleftShooter = new CANTalon(8);
        LiveWindow.addActuator("Shooter", "leftShooter", shooterleftShooter);
        
        shooterrightShooter = new CANTalon(9);
        LiveWindow.addActuator("Shooter", "rightShooter", shooterrightShooter);
        
        intakeintakeMotor = new CANTalon(10);
        LiveWindow.addActuator("Intake", "intakeMotor", intakeintakeMotor);
        
        gearreleaseFlap = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Gear", "releaseFlap", gearreleaseFlap);
        
        gearreceiveFlap = new Solenoid(0, 4);
        LiveWindow.addActuator("Gear", "receiveFlap", gearreceiveFlap);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
